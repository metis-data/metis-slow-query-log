"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MPgClient = void 0;
const pg_1 = require("pg");
class MPgClient {
    constructor(clientConfig, connectMgClient = false) {
        this.connectClient = () => __awaiter(this, void 0, void 0, function* () {
            this.client.connect();
        });
        this.queryDatabase = (query) => __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.client.query(query);
                return (result === null || result === void 0 ? void 0 : result.rows) || [];
            }
            catch (error) {
                throw error;
            }
        });
        this.endClient = () => __awaiter(this, void 0, void 0, function* () {
            this.client.end();
        });
        if (clientConfig instanceof pg_1.Client) {
            this.client = clientConfig;
        }
        else {
            this.client = new pg_1.Client(clientConfig);
        }
        if (connectMgClient) {
            this.connectClient();
        }
    }
}
exports.MPgClient = MPgClient;
//# sourceMappingURL=pg-client.js.map