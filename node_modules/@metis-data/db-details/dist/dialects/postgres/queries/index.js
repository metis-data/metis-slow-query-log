"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.query8_get_index_usage = exports.query7_get_tables_size = exports.query6_helper_create_foreign_table = exports.query6_helper_dropForeignTable = exports.query6_helper_check_if_table_exists = exports.query6_helper_get_log_file_to_create_table_from = exports.query6_helper_create_fdw_extension = exports.query6_helper_create_server = exports.query6_helper_check_if_postgres_fdw_extension_available = exports.query6_get_from_table_log_fdw_slow_query_log = exports.query5_get_database_config = exports.query4_get_database_stat_statements = exports.query3_get_database_available_extensions = exports.query2_get_tables_extra_data_from_pg_stats_extension = exports.query1_get_tables_rows_count_from_pg_class = void 0;
const query1_get_tables_rows_count_from_pg_class = `SELECT n.nspname AS schema_name, c.relname AS table_name, c.reltuples AS rows, c.relpages AS pages, c.oid AS relid
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE c.relkind = 'r'`;
exports.query1_get_tables_rows_count_from_pg_class = query1_get_tables_rows_count_from_pg_class;
const query2_get_tables_extra_data_from_pg_stats_extension = `SELECT relid,
relname as table_name, 
(schemaname || '.' || relname) as full_table_name,
n_live_tup::INTEGER as rows,
n_dead_tup::INTEGER as dead_rows,
n_mod_since_analyze,
CASE
  WHEN n_live_tup = 0 THEN 0
  ELSE n_mod_since_analyze / n_live_tup
END AS pct_mod_since_analyze,
last_analyze as last_analyze_date,
last_autoanalyze as last_autoanalyze_date,
pg_total_relation_size(relid) / 1024 as total_table_size_kb, 
pg_table_size(relid) / 1024 as table_size_kb,
pg_indexes_size(relid) / 1024 as indexes_size_kb,
pg_size_pretty(pg_total_relation_size(relid)) as total_table_size_pretty, 
pg_size_pretty(pg_table_size(relid)) as table_size_pretty,
pg_size_pretty(pg_indexes_size(relid)) as index_size_pretty
FROM pg_stat_user_tables;`;
exports.query2_get_tables_extra_data_from_pg_stats_extension = query2_get_tables_extra_data_from_pg_stats_extension;
const query3_get_database_available_extensions = `SELECT name, default_version, installed_version, comment 
FROM pg_available_extensions 
ORDER BY name`;
exports.query3_get_database_available_extensions = query3_get_database_available_extensions;
const query4_get_database_stat_statements = `
select distinct on (queryid ) queryid as query_id,
pgss.calls as calls,
pgss.query,
pgss.rows,
pgss.total_exec_time,
pgss.mean_exec_time,
pgss.dbid as db_id,
pgd.datname as database_name,
blk_read_time + blk_write_time as disk_io_time,
to_jsonb(pgss) - 'userId' - 'dbid' - 'mean_exec_time' - 'total_exec_time' - 'rows' - 'query' - 'queryid' - 'calls' as metadata
from 
pg_stat_statements as pgss
join pg_database as d  on pgss.dbid = d.oid
join pg_database pgd on pgd.oid = pgss.dbid
where rows > 0 and total_exec_time > 0
order by queryid desc
limit 300;`;
exports.query4_get_database_stat_statements = query4_get_database_stat_statements;
const query5_get_database_config = `show all`;
exports.query5_get_database_config = query5_get_database_config;
const query6_get_from_table_log_fdw_slow_query_log = `SELECT * FROM FOREIGN_TABLE_NAME where message like '%plan%'`;
exports.query6_get_from_table_log_fdw_slow_query_log = query6_get_from_table_log_fdw_slow_query_log;
const query6_helper_check_if_postgres_fdw_extension_available = `SELECT name FROM pg_available_extensions as pae where pae.name = 'log_fdw';`;
exports.query6_helper_check_if_postgres_fdw_extension_available = query6_helper_check_if_postgres_fdw_extension_available;
const query6_helper_create_fdw_extension = `CREATE EXTENSION log_fdw;`;
exports.query6_helper_create_fdw_extension = query6_helper_create_fdw_extension;
const query6_helper_create_server = `CREATE SERVER IF NOT EXISTS metis_log_server FOREIGN DATA WRAPPER log_fdw;`;
exports.query6_helper_create_server = query6_helper_create_server;
const query6_helper_get_log_file_to_create_table_from = `select * from pg_ls_logdir() where name like '%csv%' ORDER BY modification DESC limit 1`;
exports.query6_helper_get_log_file_to_create_table_from = query6_helper_get_log_file_to_create_table_from;
const query6_helper_check_if_table_exists = `SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'FOREIGN_TABLE_NAME');`;
exports.query6_helper_check_if_table_exists = query6_helper_check_if_table_exists;
const query6_helper_dropForeignTable = `DROP FOREIGN TABLE FOREIGN_TABLE_NAME`;
exports.query6_helper_dropForeignTable = query6_helper_dropForeignTable;
const query6_helper_create_foreign_table = `SELECT create_foreign_table_for_log_file(FOREIGN_TABLE_NAME,'metis_log_server', CSV_LOG_FILE_NAME); `;
exports.query6_helper_create_foreign_table = query6_helper_create_foreign_table;
const query7_get_tables_size = `SELECT
n.nspname AS schema,
c.relname AS table,
relpages AS pages,
reltuples AS rows,
pg_relation_size(c.oid) / 1024 AS relation_size,
pg_table_size(c.oid) / 1024 AS table_size,
pg_size_pretty(pg_table_size(c.oid)) AS table_size_pretty,
pg_indexes_size(c.oid) / 1024 AS indexes_size,
pg_size_pretty(pg_indexes_size(c.oid)) AS indexes_size_pretty,
(pg_total_relation_size(c.oid) - pg_relation_size(c.oid) - pg_indexes_size(c.oid)) / 1024 AS toast_size,
pg_size_pretty(pg_total_relation_size(c.oid) - pg_relation_size(c.oid) - pg_indexes_size(c.oid)) as toast_size_pretty,
pg_stat_get_dead_tuples(c.oid) AS dead_rows_tuples
FROM
pg_class AS c
LEFT JOIN pg_namespace AS n ON (N.oid = c.relnamespace)
WHERE
relkind = 'r'
AND n.nspname NOT IN ('pg_catalog', 'information_schema');`;
exports.query7_get_tables_size = query7_get_tables_size;
const query8_get_index_usage = `SELECT
sui.schemaname AS schema, sui.relid, sui.relname AS table, sui.indexrelid, sui.indexrelname AS index,
sui.idx_scan AS index_scans, sui.idx_tup_read AS index_rows_reads, sui.idx_tup_fetch AS index_rows_writes,
sio_ui.idx_blks_read AS pages_read_from_disk, sio_ui.idx_blks_hit AS pages_read_from_buffer
FROM pg_stat_user_indexes AS sui
JOIN pg_statio_user_indexes AS sio_ui
ON sui.relid = sio_ui.relid
AND sui.indexrelid = sio_ui.indexrelid;`;
exports.query8_get_index_usage = query8_get_index_usage;
//# sourceMappingURL=index.js.map