declare const query1_get_tables_rows_count_from_pg_class = "SELECT n.nspname AS schema_name, c.relname AS table_name, c.reltuples AS rows, c.relpages AS pages, c.oid AS relid\nFROM pg_class c\nJOIN pg_namespace n ON c.relnamespace = n.oid\nWHERE c.relkind = 'r'";
declare const query2_get_tables_extra_data_from_pg_stats_extension = "SELECT relid,\nrelname as table_name, \n(schemaname || '.' || relname) as full_table_name,\nn_live_tup::INTEGER as rows,\nn_dead_tup::INTEGER as dead_rows,\nn_mod_since_analyze,\nCASE\n  WHEN n_live_tup = 0 THEN 0\n  ELSE n_mod_since_analyze / n_live_tup\nEND AS pct_mod_since_analyze,\nlast_analyze as last_analyze_date,\nlast_autoanalyze as last_autoanalyze_date,\npg_total_relation_size(relid) / 1024 as total_table_size_kb, \npg_table_size(relid) / 1024 as table_size_kb,\npg_indexes_size(relid) / 1024 as indexes_size_kb,\npg_size_pretty(pg_total_relation_size(relid)) as total_table_size_pretty, \npg_size_pretty(pg_table_size(relid)) as table_size_pretty,\npg_size_pretty(pg_indexes_size(relid)) as index_size_pretty\nFROM pg_stat_user_tables;";
declare const query3_get_database_available_extensions = "SELECT name, default_version, installed_version, comment \nFROM pg_available_extensions \nORDER BY name";
declare const query4_get_database_stat_statements = "\nselect distinct on (queryid ) queryid as query_id,\npgss.calls as calls,\npgss.query,\npgss.rows,\npgss.total_exec_time,\npgss.mean_exec_time,\npgss.dbid as db_id,\npgd.datname as database_name,\nblk_read_time + blk_write_time as disk_io_time,\nto_jsonb(pgss) - 'userId' - 'dbid' - 'mean_exec_time' - 'total_exec_time' - 'rows' - 'query' - 'queryid' - 'calls' as metadata\nfrom \npg_stat_statements as pgss\njoin pg_database as d  on pgss.dbid = d.oid\njoin pg_database pgd on pgd.oid = pgss.dbid\nwhere rows > 0 and total_exec_time > 0\norder by queryid desc\nlimit 300;";
declare const query5_get_database_config = "show all";
declare const query6_get_from_table_log_fdw_slow_query_log = "SELECT * FROM FOREIGN_TABLE_NAME where message like '%plan%'";
declare const query6_helper_check_if_postgres_fdw_extension_available = "SELECT name FROM pg_available_extensions as pae where pae.name = 'log_fdw';";
declare const query6_helper_create_fdw_extension = "CREATE EXTENSION log_fdw;";
declare const query6_helper_create_server = "CREATE SERVER IF NOT EXISTS metis_log_server FOREIGN DATA WRAPPER log_fdw;";
declare const query6_helper_get_log_file_to_create_table_from = "select * from pg_ls_logdir() where name like '%csv%' ORDER BY modification DESC limit 1";
declare const query6_helper_check_if_table_exists = "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'FOREIGN_TABLE_NAME');";
declare const query6_helper_dropForeignTable = "DROP FOREIGN TABLE FOREIGN_TABLE_NAME";
declare const query6_helper_create_foreign_table = "SELECT create_foreign_table_for_log_file(FOREIGN_TABLE_NAME,'metis_log_server', CSV_LOG_FILE_NAME); ";
declare const query7_get_tables_size = "SELECT\nn.nspname AS schema,\nc.relname AS table,\nrelpages AS pages,\nreltuples AS rows,\npg_relation_size(c.oid) / 1024 AS relation_size,\npg_table_size(c.oid) / 1024 AS table_size,\npg_size_pretty(pg_table_size(c.oid)) AS table_size_pretty,\npg_indexes_size(c.oid) / 1024 AS indexes_size,\npg_size_pretty(pg_indexes_size(c.oid)) AS indexes_size_pretty,\n(pg_total_relation_size(c.oid) - pg_relation_size(c.oid) - pg_indexes_size(c.oid)) / 1024 AS toast_size,\npg_size_pretty(pg_total_relation_size(c.oid) - pg_relation_size(c.oid) - pg_indexes_size(c.oid)) as toast_size_pretty,\npg_stat_get_dead_tuples(c.oid) AS dead_rows_tuples\nFROM\npg_class AS c\nLEFT JOIN pg_namespace AS n ON (N.oid = c.relnamespace)\nWHERE\nrelkind = 'r'\nAND n.nspname NOT IN ('pg_catalog', 'information_schema');";
declare const query8_get_index_usage = "SELECT\nsui.schemaname AS schema, sui.relid, sui.relname AS table, sui.indexrelid, sui.indexrelname AS index,\nsui.idx_scan AS index_scans, sui.idx_tup_read AS index_rows_reads, sui.idx_tup_fetch AS index_rows_writes,\nsio_ui.idx_blks_read AS pages_read_from_disk, sio_ui.idx_blks_hit AS pages_read_from_buffer\nFROM pg_stat_user_indexes AS sui\nJOIN pg_statio_user_indexes AS sio_ui\nON sui.relid = sio_ui.relid\nAND sui.indexrelid = sio_ui.indexrelid;";
export { query1_get_tables_rows_count_from_pg_class, query2_get_tables_extra_data_from_pg_stats_extension, query3_get_database_available_extensions, query4_get_database_stat_statements, query5_get_database_config, query6_get_from_table_log_fdw_slow_query_log, query6_helper_check_if_postgres_fdw_extension_available, query6_helper_create_server, query6_helper_create_fdw_extension, query6_helper_get_log_file_to_create_table_from, query6_helper_check_if_table_exists, query6_helper_dropForeignTable, query6_helper_create_foreign_table, query7_get_tables_size, query8_get_index_usage };
