"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const db_details_1 = __importDefault(require("../db-details"));
const pg_structure_resource_1 = require("./resources/pg-structure-resource");
const pg_1 = require("pg");
const pg_client_1 = require("../utils/pg-client");
const queries_1 = require("./queries");
class PGDbDetails extends db_details_1.default {
    setClientFromConnection(connection) {
        if (!(connection && !(Object.keys(connection).length === 0) || (connection === null || connection === void 0 ? void 0 : connection.database) || (connection === null || connection === void 0 ? void 0 : connection.host) || (connection === null || connection === void 0 ? void 0 : connection.password) || (connection === null || connection === void 0 ? void 0 : connection.user))) {
            throw Error('The connection is configured incorrectly');
        }
        this.connection = connection;
        this.client = new pg_1.Client(connection);
    }
    setClientFromClientInstance(client) {
        this.client = new pg_1.Client(client);
    }
    setDataResourcesFromDb() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        return __awaiter(this, void 0, void 0, function* () {
            const mgClient = new pg_client_1.MPgClient(this.client);
            this.pgStructure = yield (0, pg_structure_resource_1.getPgStructure)(this.client);
            this.tablesRowsAndPagesCount = yield mgClient.queryDatabase(queries_1.query1_get_tables_rows_count_from_pg_class);
            this.partialPgStatsTablesData = yield mgClient.queryDatabase(queries_1.query2_get_tables_extra_data_from_pg_stats_extension);
            if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.getDbConfig) && !((_b = this.options) === null || _b === void 0 ? void 0 : _b.getAllExtraData)) {
                this.databaseConfig = yield mgClient.queryDatabase(queries_1.query5_get_database_config);
            }
            if (((_c = this.options) === null || _c === void 0 ? void 0 : _c.getDbAvailableExtensions) && !((_d = this.options) === null || _d === void 0 ? void 0 : _d.getAllExtraData)) {
                this.databaseAvailableExtensions = yield mgClient.queryDatabase(queries_1.query3_get_database_available_extensions);
            }
            if (((_e = this.options) === null || _e === void 0 ? void 0 : _e.getDbStatStatements) && !((_f = this.options) === null || _f === void 0 ? void 0 : _f.getAllExtraData)) {
                this.databaseStatStatements = yield mgClient.queryDatabase(queries_1.query4_get_database_stat_statements);
            }
            if (((_g = this.options) === null || _g === void 0 ? void 0 : _g.getDbTableSize) && !((_h = this.options) === null || _h === void 0 ? void 0 : _h.getAllExtraData)) {
                this.tableSize = yield mgClient.queryDatabase(queries_1.query7_get_tables_size);
            }
            if (((_j = this.options) === null || _j === void 0 ? void 0 : _j.getDbIndexUsage) && !((_k = this.options) === null || _k === void 0 ? void 0 : _k.getAllExtraData)) {
                this.tableSize = yield mgClient.queryDatabase(queries_1.query8_get_index_usage);
            }
            if ((_l = this.options) === null || _l === void 0 ? void 0 : _l.getAllExtraData) {
                this.databaseAvailableExtensions = yield mgClient.queryDatabase(queries_1.query3_get_database_available_extensions);
                this.databaseConfig = yield mgClient.queryDatabase(queries_1.query5_get_database_config);
                this.databaseStatStatements = yield mgClient.queryDatabase(queries_1.query4_get_database_stat_statements);
                this.tableSize = yield mgClient.queryDatabase(queries_1.query7_get_tables_size);
                this.indexUsage = yield mgClient.queryDatabase(queries_1.query8_get_index_usage);
            }
            if (!(this.options && ((_m = this.options) === null || _m === void 0 ? void 0 : _m.keepClientConnectionOpen))) {
                mgClient.endClient();
            }
        });
    }
    manageSlowQueryLogRead() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const mgClient = new pg_client_1.MPgClient(this.client, true);
                const foreignTableName = 'metis_slow_qry_log_foreign_table';
                const isFdwExtensionAvailable = yield mgClient.queryDatabase(queries_1.query6_helper_check_if_postgres_fdw_extension_available);
                if (!(isFdwExtensionAvailable[0].name === 'log_fdw')) {
                    yield mgClient.queryDatabase(queries_1.query6_helper_create_fdw_extension);
                }
                yield mgClient.queryDatabase(queries_1.query6_helper_create_server);
                const isForeignTableExist = yield mgClient.queryDatabase(queries_1.query6_helper_check_if_table_exists.replace('FOREIGN_TABLE_NAME', foreignTableName));
                const logFileName = yield mgClient.queryDatabase(queries_1.query6_helper_get_log_file_to_create_table_from);
                this.logFileName = `'${logFileName[0].name}'`;
                if ((_a = isForeignTableExist[0]) === null || _a === void 0 ? void 0 : _a.exists) {
                    yield mgClient.queryDatabase(queries_1.query6_helper_dropForeignTable.replace('FOREIGN_TABLE_NAME', `${foreignTableName}`));
                }
                const updated_query6_helper_create_foreign_table = queries_1.query6_helper_create_foreign_table
                    .replace('FOREIGN_TABLE_NAME', `'${foreignTableName}'`)
                    .replace('CSV_LOG_FILE_NAME', this.logFileName);
                yield mgClient.queryDatabase(updated_query6_helper_create_foreign_table);
                this.slowQueryLogData = yield mgClient.queryDatabase(queries_1.query6_get_from_table_log_fdw_slow_query_log.replace('FOREIGN_TABLE_NAME', foreignTableName));
                if (!(this.options && ((_b = this.options) === null || _b === void 0 ? void 0 : _b.keepClientConnectionOpen))) {
                    mgClient.endClient();
                }
            }
            catch (error) {
                console.log(error);
            }
        });
    }
    aggregateResourcesToOneResource() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let aggregateStructure = [];
                const pgStatsTablesDataMap = new Map();
                const tablesRowsAndPagesCountMap = new Map();
                (_a = this.partialPgStatsTablesData) === null || _a === void 0 ? void 0 : _a.map((data) => {
                    if (data && (data === null || data === void 0 ? void 0 : data.relid)) {
                        pgStatsTablesDataMap.set(data === null || data === void 0 ? void 0 : data.relid, data);
                    }
                });
                (_b = this.tablesRowsAndPagesCount) === null || _b === void 0 ? void 0 : _b.map((data) => {
                    if (data && (data === null || data === void 0 ? void 0 : data.relid) && (data === null || data === void 0 ? void 0 : data.rows) && (data === null || data === void 0 ? void 0 : data.pages)) {
                        tablesRowsAndPagesCountMap.set(data === null || data === void 0 ? void 0 : data.relid, data);
                    }
                });
                if (Array.isArray(this.pgStructure) && ((_c = this.pgStructure) === null || _c === void 0 ? void 0 : _c.length) > 0) {
                    aggregateStructure = (_d = this.pgStructure) === null || _d === void 0 ? void 0 : _d.map((schema) => {
                        var _a;
                        return Object.assign(Object.assign({}, schema), { tables: (_a = schema === null || schema === void 0 ? void 0 : schema.tables) === null || _a === void 0 ? void 0 : _a.map((table) => {
                                const pgStatsTableItem = pgStatsTablesDataMap.get(table.tableId);
                                const tableRowsAndPagesItem = tablesRowsAndPagesCountMap.get(table.tableId);
                                return Object.assign(Object.assign({}, table), { table_name: (pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.table_name) || 'failed_get_table_name', full_table_name: (pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.full_table_name) || 'failed_get_full_table_name', dead_rows: (pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.dead_rows) || 0, n_mod_since_analyze: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.n_mod_since_analyze, pct_mod_since_analyze: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.pct_mod_since_analyze, last_analyze_date: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.last_analyze_date, last_autoanalyze_date: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.last_autoanalyze_date, total_table_size_kb: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.total_table_size_kb, table_size_kb: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.table_size_kb, indexes_size_kb: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.indexes_size_kb, total_table_size_pretty: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.total_table_size_pretty, table_size_pretty: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.table_size_pretty, index_size_pretty: pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.index_size_pretty, rows: (tableRowsAndPagesItem === null || tableRowsAndPagesItem === void 0 ? void 0 : tableRowsAndPagesItem.rows) || (pgStatsTableItem === null || pgStatsTableItem === void 0 ? void 0 : pgStatsTableItem.rows) || 0, pages: (tableRowsAndPagesItem === null || tableRowsAndPagesItem === void 0 ? void 0 : tableRowsAndPagesItem.pages) || 0 });
                            }) });
                    });
                }
                this.dbDetails = aggregateStructure || [];
            }
            catch (error) {
                throw error;
            }
        });
    }
    getDbDetailsUseConnectionString(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.setClientFromConnection(connection);
            }
            catch (error) {
                throw (error);
            }
        });
    }
    getDbDetails(clientOrConnectionConfig, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.options = options;
                if (clientOrConnectionConfig instanceof pg_1.Client) {
                    this.setClientFromClientInstance(clientOrConnectionConfig);
                }
                else {
                    this.setClientFromConnection(clientOrConnectionConfig);
                }
                yield this.setDataResourcesFromDb();
                this.aggregateResourcesToOneResource();
                return this.dbDetails;
            }
            catch (error) {
                throw (error);
            }
        });
    }
    getExtendedDbDetailsData(clientOrConnectionConfig, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.options = options;
                if (clientOrConnectionConfig instanceof pg_1.Client) {
                    this.setClientFromClientInstance(clientOrConnectionConfig);
                }
                else {
                    this.setClientFromConnection(clientOrConnectionConfig);
                }
                yield this.setDataResourcesFromDb();
                this.aggregateResourcesToOneResource();
                return {
                    dbDetails: this.dbDetails,
                    databaseConfig: this.databaseConfig,
                    databaseAvailableExtensions: this.databaseAvailableExtensions,
                    databaseStatStatements: this.databaseStatStatements,
                    tableSize: this.tableSize,
                    indexUsage: this.indexUsage
                };
            }
            catch (error) {
                throw (error);
            }
        });
    }
    getSlowQueryLogQueriesSpans(clientOrConnectionConfig, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (clientOrConnectionConfig instanceof pg_1.Client) {
                    this.setClientFromClientInstance(clientOrConnectionConfig);
                }
                else {
                    this.setClientFromConnection(clientOrConnectionConfig);
                }
                yield this.manageSlowQueryLogRead();
                return this.slowQueryLogData;
            }
            catch (error) {
                throw (error);
            }
        });
    }
}
exports.default = PGDbDetails;
//# sourceMappingURL=index.js.map